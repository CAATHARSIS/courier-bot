package bot

import (
	"context"
	"fmt"
	"log/slog"
	"strconv"
	"strings"
	"time"

	"github.com/CAATHARSIS/courier-bot/internal/models"
	"github.com/CAATHARSIS/courier-bot/internal/service/assignment"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Handlers struct {
	assignmentService *assignment.Service
	keyboardManager   KeyboardManagerInterface
	log               *slog.Logger
}

func NewHandlers(assignmentService *assignment.Service, keyboardManager KeyboardManagerInterface, log *slog.Logger) *Handlers {
	return &Handlers{
		assignmentService: assignmentService,
		keyboardManager:   keyboardManager,
		log:               log,
	}
}

func (h *Handlers) HandleMessage(ctx context.Context, bot BotInterface, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	h.log.Info("Received message", "From", chatID, "Message", text)

	switch text {
	case "/start":
		h.HandleStartCommand(bot, chatID, update.Message.From)
	case "/help", "üÜò –ü–æ–º–æ—â—å":
		h.HandleHelpCommand(bot, chatID)
	case "/orders", "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
		h.HandleMyOrdersCommand(ctx, bot, chatID)
	case "/status", "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å":
		h.HandleStatusCommand(bot, chatID)
	case "/settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		h.HandleSettingsCommand(bot, chatID)
	default:
		h.HandleUnknownCommand(bot, chatID)
	}
}

func (h *Handlers) HandleCallback(ctx context.Context, bot BotInterface, update tgbotapi.Update) {
	if update.CallbackQuery == nil {
		return
	}

	callback := update.CallbackQuery

	var chatID int64
	if callback.Message != nil {
		chatID = callback.Message.Chat.ID
	} else {
		chatID = callback.From.ID
		h.log.Warn("Callback without message, usting user ID as chatID", "userID", callback.From.ID, "callbackData", callback.Data)
	}

	callbackData := callback.Data

	h.log.Info("Received callback", "chatID", chatID, "callbackData", callbackData, "messageID", callback.Message.MessageID)

	if bot == nil {
		h.log.Error("Bot interface is nil in callback handler")
		return
	}
	
	if err := bot.AnswerCallbackQuery(callback.ID); err != nil {
		h.log.Error("Failed to answer callback query", "error", err)
	}

	action := h.keyboardManager.GetActionFromCallback(callbackData)

	switch action {
	case ActionAccept:
		h.HandleAcceptOrder(ctx, bot, chatID, callbackData, int64(callback.Message.MessageID))
	case ActionReject:
		h.HandleRejectOrder(ctx, bot, chatID, callbackData, int64(callback.Message.MessageID))
	case ActionComplete:
		h.HandleCompleteOrder(ctx, bot, chatID, callbackData)
	case ActionProblem:
		h.HandleProblemOrder(bot, chatID, callbackData)
	case ActionNavigate:
		h.HandleNavigation(bot, chatID, callbackData)
	case ActionCall:
		h.HandleCallCustomer(bot, chatID, callbackData)
	case ActionStatus:
		h.HandleStatusUpdate(ctx, bot, chatID, callbackData)
	case ActionSettings:
		h.HandleSettings(bot, chatID, callbackData)
	case ActionConfirm:
		h.HandleConfirmation(bot, chatID, callbackData)
	case ActionRefresh:
		h.HandleRefresh(ctx, bot, chatID, callbackData)
	case ActionMenu:
		h.HandleMenu(bot, chatID, callbackData)
	case ActionOrderDetails:
		h.HandleOrderDetails(ctx, bot, chatID, callbackData)
	case ActionBackToOrder:
		h.HandleBackToOrder(ctx, bot, chatID, callbackData)
	case ActionConfirmDelivery:
		h.HandleDeliveryConfirmation(ctx, bot, chatID, callbackData)
	case ActionCancelDelivery:
		h.HandleDeliveryCancel(ctx, bot, chatID, callbackData)
	default:
		h.HandleUnknownCommand(bot, chatID)
	}
}

// COMMAND HANDLERS

func (h *Handlers) HandleStartCommand(bot BotInterface, chatID int64, user *tgbotapi.User) {
	message := fmt.Sprintf(
		"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, %s!\n\n"+
			"–Ø - –±–æ—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏. –ë—É–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –≤ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n\n"+
			"*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"+
			"‚Ä¢ üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"+
			"‚Ä¢ ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ\n"+
			"‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"+
			"‚Ä¢ üÜò –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"+
			"–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!",
		user.FirstName,
	)

	keyboard := h.keyboardManager.CreateMainMenuKeyboard()
	bot.SendMessageWithKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleHelpCommand(bot BotInterface, chatID int64) {
	message := "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n" +
		"*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n" +
		"‚Ä¢ üì¶ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n" +
		"‚Ä¢ ‚úÖ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n" +
		"‚Ä¢ üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏\n" +
		"‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n" +
		"‚Ä¢ üèÅ –û—Ç–º–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏\n\n" +
		"*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:*\n" +
		"‚Ä¢ ‚úÖ –ü—Ä–∏–Ω—è—Ç—å - –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É\n" +
		"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞\n" +
		"‚Ä¢ üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é\n" +
		"‚Ä¢ üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n" +
		"‚Ä¢ üèÅ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n" +
		"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleMyOrdersCommand(ctx context.Context, bot BotInterface, chatID int64) {
	h.log.Info("Fetching active orders for courier", "ChatID", chatID)

	orders, err := h.assignmentService.GetActiveOrdersByCourier(ctx, chatID)
	if err != nil {
		h.log.Error("Failed to get active orders for courier", "chatID", chatID, "Error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if len(orders) == 0 {
		message := "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã*\n\n" +
			"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n" +
			"üí° *–°–æ–≤–µ—Ç:* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Å—Ç–∞—Ç—É—Å '–ê–∫—Ç–∏–≤–µ–Ω' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n" +
			"–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
		bot.SendMessage(chatID, message)
		return
	}

	orderItems := h.convertOrdersToOrderListItem(ctx, orders)
	message := h.formatOrdersSummary(orderItems)
	keyboard := h.keyboardManager.CreateOrderListKeyboard(orderItems)

	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

// –≠–¢–û –ó–ê–ì–õ–£–®–ö–ê, –ô–û–£
func (h *Handlers) HandleStatusCommand(bot BotInterface, chatID int64) {
	message := "‚ÑπÔ∏è *–í–∞—à —Å—Ç–∞—Ç—É—Å*\n\n" +
		"‚Ä¢ üì± –°—Ç–∞—Ç—É—Å: *–ê–∫—Ç–∏–≤–µ–Ω*\n" +
		"‚Ä¢ üöó –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: *–î–∞*\n" +
		"‚Ä¢ üìä –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: *0*\n" +
		"‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: *–¢—ã –∑–∞–≥–ª—É—à–µ—á–∫–∞*\n\n" +
		"–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã! üöÄ"

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleSettingsCommand(bot BotInterface, chatID int64) {
	message := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

	keyboard := h.keyboardManager.CreateSettingsKeyboard()
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleUnknownCommand(bot BotInterface, chatID int64) {
	message := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."

	bot.SendMessage(chatID, message)
}

// CALLBACK HANDLERS

func (h *Handlers) HandleAcceptOrder(ctx context.Context, bot BotInterface, chatID int64, callbackData string, messageID int64) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from callback", "CallbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
		return
	}

	h.log.Info("Courier accepting order", "chatID", chatID, "orderID", orderID)

	bot.EditMessageReplyMarkup(chatID, messageID, nil)

	err = h.assignmentService.HandleCourierResponse(ctx, chatID, orderID, true)
	if err != nil {
		h.log.Error("Failed to accept order by courier", "orderID", orderID, "chatID", chatID, "error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
}

func (h *Handlers) HandleRejectOrder(ctx context.Context, bot BotInterface, chatID int64, callbackData string, messageID int64) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from callback", "CallbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
		return
	}

	h.log.Info("Courier rejecting order", "chatID", chatID, "orderID", orderID)

	bot.EditMessageReplyMarkup(chatID, messageID, nil)

	err = h.assignmentService.HandleCourierResponse(ctx, chatID, orderID, false)
	if err != nil {
		h.log.Error("Failed to reject order by courier", "orderID", orderID, "chatID", chatID, "error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}
}

func (h *Handlers) HandleCompleteOrder(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from callback", "CallbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
		return
	}

	message := fmt.Sprintf(
		"‚úÖ *–ó–∞–∫–∞–∑ #%d –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"+
			"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–æ–π!",
		orderID,
	)

	bot.SendMessage(chatID, message)

	h.assignmentService.UpdateOrderStatusReceived(ctx, orderID, true)
	h.log.Info("Order marked as completed by courier", "orderID", orderID, "chatID", chatID)
}

func (h *Handlers) HandleProblemOrder(bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from callback", "Callback", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
		return
	}

	message := fmt.Sprintf(
		"üö® *–ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º #%d*\n\n"+
			"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
		orderID,
	)

	keyboard := h.keyboardManager.CreateProblemKeyboard(orderID)
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleNavigation(bot BotInterface, chatID int64, callbackData string) {
	parts := strings.Split(callbackData, "_")
	if len(parts) < 3 {
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
		return
	}

	orderID := parts[1]
	address := strings.Join(parts[2:], " ")

	message := fmt.Sprintf(
		"üó∫Ô∏è *–ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ #%s*\n\n"+
			"*–ê–¥—Ä–µ—Å:* %s\n\n"+
			"–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—É—Ä—É—Ç–∞.",
		orderID,
		address,
	)

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleCallCustomer(bot BotInterface, chatID int64, callbackData string) {
	parts := strings.Split(callbackData, "_")
	if len(parts) < 3 {
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
		return
	}

	orderID := parts[1]
	phone := parts[2]

	message := fmt.Sprintf(
		"üìû *–ó–≤–æ–Ω–æ–∫ –∫–ª–∏–µ–Ω—Ç—É –∑–∞–∫–∞–∑–∞ #%s*\n\n"+
			"*–¢–µ–ª–µ—Ñ–æ–Ω:* `%s`\n\n"+
			"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä –¥–ª—è –∑–≤–æ–Ω–∫–∞.",
		orderID,
		phone,
	)

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleStatusUpdate(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	h.log.Info("Processing status update from courier", "chatID", chatID, "callbackData", callbackData)

	action, orderID, err := h.parseStatusCallback(callbackData)
	if err != nil {
		h.log.Error("Failed to parse status callback", "chatID", chatID, "callbackData", callbackData, "error", err)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
		return
	}

	order, err := h.assignmentService.GetOrderByID(ctx, orderID)
	if err != nil {
		h.log.Error("Failed to get order", "orderID", orderID, "error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.")
		return
	}

	courier, err := h.assignmentService.GetCourierByChatID(ctx, chatID)
	if err != nil {
		h.log.Error("Failed to get courier", "chatID", chatID, "error", err)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞")
		return
	}

	if order.CourierID == nil || *order.CourierID != courier.ID {
		bot.SendMessage(chatID, "‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞–º.")
		return
	}

	switch action {
	case "status_picked":
		h.handleOrderPicked(bot, chatID, orderID, order)
	case "status_delivering":
		h.handleOrderDelivering(bot, chatID, orderID, order)
	case "status_arrived":
		h.handleOrderArrived(bot, chatID, orderID, order)
	case "status_delivered":
		h.handleOrderDelivered(ctx, bot, chatID, orderID)
	default:
		bot.SendMessage(chatID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
		return
	}
}

func (h *Handlers) HandleSettings(bot BotInterface, chatID int64, callbackData string) {
	switch callbackData {
	case SettingsNotifications:
		bot.SendMessage(chatID, "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...\n–£–±—Ä–∞—Ç—å –º–æ–∂–µ—Ç —ç")
	case SettingsWorkmode:
		bot.SendMessage(chatID, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã...\n–£–±—Ä–∞—Ç—å –º–æ–∂–µ—Ç —ç")
	case SettingsContacts:
		bot.SendMessage(chatID, "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è...\n–£–±—Ä–∞—Ç—å –º–æ–∂–µ—Ç —ç")
	default:
		h.HandleSettingsCommand(bot, chatID)
	}
}

func (h *Handlers) HandleConfirmation(bot BotInterface, chatID int64, callbackData string) {
	bot.SendMessage(chatID, "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
}

func (h *Handlers) HandleRefresh(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	h.HandleMyOrdersCommand(ctx, bot, chatID)
}

func (h *Handlers) HandleMenu(bot BotInterface, chatID int64, callbackData string) {
	h.HandleStartCommand(bot, chatID, &tgbotapi.User{FirstName: "–ö—É—Ä—å–µ—Ä"})
}

func (h *Handlers) HandleOrderDetails(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from delivery confirmation", "callbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.")
		return
	}

	order, err := h.assignmentService.GetOrderByID(ctx, orderID)
	if err != nil {
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ.")
		return
	}

	message := fmt.Sprintf(
		"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ #%d*\n\n"+
			"*–°—Ç–∞—Ç—É—Å:* %s\n"+
			"*–ê–¥—Ä–µ—Å:* %s %s\n"+
			"*–ö–ª–∏–µ–Ω—Ç:* %s %s\n"+
			"*–¢–µ–ª–µ—Ñ–æ–Ω:* %s\n"+
			"*–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* %s\n\n"+
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–æ–π:",
		orderID,
		h.determineOrderStatus(ctx, *order),
		order.City, order.Address,
		order.Surname, order.Name,
		order.PhoneNumber,
		order.DeliveryDate,
	)

	keyboard := h.keyboardManager.CreateDeliveryKeyboard(orderID, order.City+order.Address, order.PhoneNumber)
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleBackToOrder(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—É.")
		return
	}

	h.HandleOrderDetails(ctx, bot, chatID, fmt.Sprintf("%s_%d", ActionOrderDetails, orderID))
}

func (h *Handlers) HandleDeliveryConfirmation(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from delivery confirmation", "callbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
		return
	}

	err = h.assignmentService.UpdateOrderStatusReceived(ctx, orderID, true)
	if err != nil {
		h.log.Error("Failed to mark order as delivered", "orderID", orderID, "error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.")
		return
	}

	message := fmt.Sprintf(
		"üéâ *–ó–∞–∫–∞–∑ #%d –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!*\n\n"+
			"‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"+
			"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!",
		orderID,
	)

	bot.SendMessage(chatID, message)
	h.log.Info("Order confirmed as delivered by courier", "orderID", orderID, "chatID", chatID)

	h.showNextActions(bot, chatID)
}

func (h *Handlers) HandleDeliveryCancel(ctx context.Context, bot BotInterface, chatID int64, callbackData string) {
	orderID, err := h.ExtractOrderID(callbackData)
	if err != nil {
		h.log.Error("Failed to extract order ID from delivery confirmation", "callbackData", callbackData)
		bot.SendMessage(chatID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
		return
	}

	message := fmt.Sprintf(
		"‚ÑπÔ∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ*\n\n"+
			"–ó–∞–∫–∞–∑ #%d –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.\n\n"+
			"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–∑–∂–µ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ.",
		orderID,
	)

	order, err := h.assignmentService.GetOrderByID(ctx, orderID)
	if err == nil && order != nil {
		keyboard := h.keyboardManager.CreateDeliveryKeyboard(orderID, order.City+order.Address, order.PhoneNumber)
		bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
	} else {
		bot.SendMessage(chatID, message)
	}

	h.log.Info("Delivery confirmation cancelled for order by courier", "orderID", orderID, "chatID", chatID)
}

// STATUS UPDATE HANDLERS

func (h *Handlers) handleOrderPicked(bot BotInterface, chatID int64, orderID int, order *models.Order) {
	message := fmt.Sprintf(
		"üì¶ *–ó–∞–∫–∞–∑ #%d –∑–∞–±—Ä–∞–Ω!*\n\n"+
			"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ –∑–∞–∫–∞–∑ —É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞.\n\n"+
			"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ:*\n"+
			"‚Ä¢ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: %s, %s\n"+
			"‚Ä¢ –ö–ª–∏–µ–Ω—Ç: %s %s\n"+
			"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: `%s`\n\n"+
			"üöó –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∫ –∫–ª–∏–µ–Ω—Ç—É.",
		orderID,
		order.Address, order.City,
		order.Surname, order.Name,
		order.PhoneNumber,
	)

	keyboard := h.keyboardManager.CreateDeliveryKeyboard(orderID, order.Address, order.PhoneNumber)
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)

	h.log.Info("Courier picked up order", "chatID", chatID, "orderID", orderID)
}

func (h *Handlers) handleOrderDelivering(bot BotInterface, chatID int64, orderID int, order *models.Order) {
	message := fmt.Sprintf(
		"üöó *–ó–∞–∫–∞–∑ #%d –≤ –ø—É—Ç–∏!*\n\n"+
			"üìç –í—ã –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å –∫ –∫–ª–∏–µ–Ω—Ç—É.\n\n"+
			"*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"+
			"‚Ä¢ üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞\n"+
			"‚Ä¢ üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞ 10-15 –º–∏–Ω—É—Ç –¥–æ –ø—Ä–∏–±—ã—Ç–∏—è\n"+
			"‚Ä¢ ‚è±Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –¥–æ—Ä–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é\n\n"+
			"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: *15-20 –º–∏–Ω—É—Ç*",
		orderID,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", fmt.Sprintf("nav_%d_%s", orderID, h.keyboardManager.EscapeCallbackData(order.Address))),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", fmt.Sprintf("call_%d_%s", orderID, order.PhoneNumber)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìç –Ø –Ω–∞ –º–µ—Å—Ç–µ", fmt.Sprintf("status_arrived_%d", orderID)),
		),
	)

	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
	h.log.Info("Courier started delivering order", "chatID", chatID, "orderID", orderID)
}

func (h *Handlers) handleOrderArrived(bot BotInterface, chatID int64, orderID int, order *models.Order) {
	message := fmt.Sprintf(
		"üìç *–í—ã –Ω–∞ –º–µ—Å—Ç–µ!*\n\n"+
			"–ó–∞–∫–∞–∑ #%d –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ –∫–ª–∏–µ–Ω—Ç—É.\n\n"+
			"*–î–µ–π—Å—Ç–≤–∏—è:*\n"+
			"1. üìû –ü–æ–∑–≤–æ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏\n"+
			"2. ‚úÖ –ü–µ—Ä–µ–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑\n"+
			"3. üí∞ –ü—Ä–∏–º–∏—Ç–µ –æ–ø–ª–∞—Ç—É (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)\n"+
			"4. üèÅ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É\n\n"+
			"–ö–ª–∏–µ–Ω—Ç: %s %s\n"+
			"–¢–µ–ª–µ—Ñ–æ–Ω: `%s`",
		orderID,
		order.Surname, order.Name,
		order.PhoneNumber,
	)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", fmt.Sprintf("call_%d_%s", orderID, order.PhoneNumber)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", fmt.Sprintf("status_delivered_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã", fmt.Sprintf("problem_%d", orderID)),
		),
	)

	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
	h.log.Info("Courier arrived with order", "chatID", chatID, "orderID", orderID)
}

func (h *Handlers) handleOrderDelivered(ctx context.Context, bot BotInterface, chatID int64, orderID int) {
	h.assignmentService.UpdateOrderStatusReceived(ctx, orderID, true)

	message := fmt.Sprintf(
		"üèÅ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n"+
			"–ó–∞–∫–∞–∑ #%d –≥–æ—Ç–æ–≤ –∫ –æ—Ç–º–µ—Ç–∫–µ –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π.\n\n"+
			"*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:*\n"+
			"‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç—É\n"+
			"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)\n"+
			"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.",
		orderID,
	)

	keyboard := h.keyboardManager.CreateConfirmationKeyboard("delivery", orderID)
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

// UTILITY METHODS

func (h *Handlers) ExtractOrderID(callbackData string) (int, error) {
	parts := strings.Split(callbackData, "_")
	if len(parts) < 2 {
		return 0, fmt.Errorf("invalid callback data format: %s", callbackData)
	}

	for i := len(parts) - 1; i >= 0; i-- {
		if id, err := strconv.Atoi(parts[i]); err == nil {
			return id, nil
		}
	}

	return 0, fmt.Errorf("order ID not found in callback data: %s", callbackData)
}

func (h *Handlers) showNextActions(bot BotInterface, chatID int64) {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "my_orders"),
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "statistics"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîÑ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "refresh_orders"),
			tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
		),
	)

	bot.SendMessageWithInlineKeyboard(chatID, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", keyboard)
}

func (h *Handlers) convertOrdersToOrderListItem(ctx context.Context, orders []models.Order) []OrderListItem {
	var items []OrderListItem

	for _, order := range orders {
		status := h.determineOrderStatus(ctx, order)
		item := OrderListItem{
			ID:      order.ID,
			Status:  status,
			Address: fmt.Sprintf("%s, %s", order.Address, order.City),
			Time:    h.formatDeliveryTime(order.DeliveryDate),
			Price:   order.FinalPrice,
		}

		items = append(items, item)
	}

	return items
}

func (h *Handlers) determineOrderStatus(ctx context.Context, order models.Order) string {
	assignment, err := h.assignmentService.GetAssignmentByOrderID(ctx, order.ID)

	if err != nil || assignment == nil {
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
	}

	switch assignment.CourierResponseStatus {
	case "waiting":
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
	case "accepted":
		switch {
		case order.IsReceived:
			return "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
		case h.isDeliveryInProgerss(order):
			return "üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ"
		default:
			return "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
		}
	case "rejected":
		return "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
	case "expired":
		return "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
	default:
		return "üìã –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
	}
}

func (h *Handlers) isDeliveryInProgerss(order models.Order) bool {
	if order.DeliveryDate == nil {
		return false
	}

	now := time.Now()
	deliveryTime := *order.DeliveryDate

	timeUntilDelivery := deliveryTime.Sub(now)
	return timeUntilDelivery <= 2*time.Hour || deliveryTime.Before(now)
}

func (h *Handlers) formatDeliveryTime(deliveryTime *time.Time) string {
	if deliveryTime == nil {
		return "‚è∞ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
	}

	now := time.Now()
	delivery := *deliveryTime

	diff := delivery.Sub(now)

	if diff <= 0 {
		return "üö® –°–†–û–ß–ù–û! –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
	}

	if diff <= time.Hour {
		minutes := int(diff.Minutes())
		if minutes <= 0 {
			return "üö® –°–†–û–ß–ù–û! –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
		}
		return fmt.Sprintf("üö® —á–µ—Ä–µ–∑ %d –º–∏–Ω", minutes)
	}

	if delivery.Year() == now.Year() && delivery.Month() == now.Month() && delivery.Day() == now.Day() {
		return fmt.Sprintf("üïê –°–µ–≥–æ–¥–Ω—è –≤ %s", delivery.Format("15:04"))
	}

	tomorrow := now.Add(24 * time.Hour)
	if delivery.Year() == tomorrow.Year() && delivery.Month() == tomorrow.Month() && delivery.Day() == tomorrow.Day() {
		return fmt.Sprintf("üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ %s", delivery.Format("15:04"))
	}

	weekLater := now.Add(7 * 24 * time.Hour)
	if delivery.Before(weekLater) {
		weekday := h.getRussianWeekday(delivery.Weekday())
		return fmt.Sprintf("üìÖ %s –≤ %s", weekday, delivery.Format("15:04"))
	}

	return fmt.Sprintf("üìÖ %s", delivery.Format("02.01 –≤ 15:04"))
}

func (h *Handlers) getRussianWeekday(weekday time.Weekday) string {
	days := map[time.Weekday]string{
		time.Monday:    "–ü–Ω",
		time.Tuesday:   "–í—Ç",
		time.Wednesday: "–°—Ä",
		time.Thursday:  "–ß—Ç",
		time.Friday:    "–ü—Ç",
		time.Saturday:  "–°–±",
		time.Sunday:    "–í—Å",
	}

	return days[weekday]
}

func (h *Handlers) formatOrdersSummary(orderItems []OrderListItem) string {
	var waitingCount, acceptCount, deliveryCount int

	for _, item := range orderItems {
		switch item.Status {
		case "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞", "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
			waitingCount++
		case "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É":
			acceptCount++
		case "üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ":
			deliveryCount++
		}
	}

	total := len(orderItems)

	summary := fmt.Sprintf(
		"üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã*\n\n"+
			"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"+
			"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %d\n"+
			"‚Ä¢ ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É: %d\n"+
			"‚Ä¢ üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ: %d\n"+
			"‚Ä¢ üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: %d\n\n",
		waitingCount,
		acceptCount,
		deliveryCount,
		total,
	)

	summary += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"

	return summary
}

func (h *Handlers) parseStatusCallback(callbackData string) (action string, orderID int, err error) {
	parts := strings.Split(callbackData, "_")

	if len(parts) < 3 {
		return "", 0, fmt.Errorf("invalid callback format: %s", callbackData)
	}

	action = strings.Join(parts[:2], "_")

	orderID, err = strconv.Atoi(parts[2])
	if err != nil {
		return "", 0, fmt.Errorf("invalid order id in callback: %s", parts[2])
	}

	return action, orderID, nil
}
