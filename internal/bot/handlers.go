package bot

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"github.com/CAATHARSIS/courier-bot/internal/models"
	"github.com/CAATHARSIS/courier-bot/internal/service/assignment"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Handlers struct {
	assignmentService *assignment.Service
	keyboardManager   KeyboardManagerInterface
	log               *slog.Logger
}

func NewHandlers(assignmentService *assignment.Service, keyboardManager KeyboardManagerInterface, log *slog.Logger) *Handlers {
	return &Handlers{
		assignmentService: assignmentService,
		keyboardManager:   keyboardManager,
		log:               log,
	}
}

func (h *Handlers) HandleMessage(ctx context.Context, bot BotInterface, update tgbotapi.Update) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	h.log.Info("Received message", "From", chatID, "Message", text)

	switch text {
	case "/start":
		h.HandleStartCommand(bot, chatID, update.Message.From)
	case "/help", "üÜò –ü–æ–º–æ—â—å":
		h.HandleHelpCommand(bot, chatID)
	case "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã":
		h.HandleMyOrdersCommand(ctx, bot, chatID)
	case "‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å":
		h.HandleStatusCommand(bot, chatID)
	case "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		h.HandleSettingsCommand(bot, chatID)
	default:
		h.HandleUnknownCommand(bot, chatID)
	}
}

// COMMAND HANDLERS

func (h *Handlers) HandleStartCommand(bot BotInterface, chatID int64, user *tgbotapi.User) {
	message := fmt.Sprintf(
		"–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, %s!\n\n"+
			"–Ø - –±–æ—Ç –¥–ª—è –∫—É—Ä—å–µ—Ä–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏. –ë—É–¥—É —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å –≤–∞—Å –≤ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.\n\n"+
			"*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"+
			"‚Ä¢ üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"+
			"‚Ä¢ ‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —Å—Ç–∞—Ç—É—Å–µ\n"+
			"‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"+
			"‚Ä¢ üÜò –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n"+
			"–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!",
		user.FirstName,
	)

	keyboard := h.keyboardManager.CreateMainMenuKeyboard()
	bot.SendMessageWithKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleHelpCommand(bot BotInterface, chatID int64) {
	message := "üÜò *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É*\n\n" +
		"*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n" +
		"‚Ä¢ üì¶ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö\n" +
		"‚Ä¢ ‚úÖ –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑\n" +
		"‚Ä¢ üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏\n" +
		"‚Ä¢ üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n" +
		"‚Ä¢ üèÅ –û—Ç–º–µ—á–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏\n\n" +
		"*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:*\n" +
		"‚Ä¢ ‚úÖ –ü—Ä–∏–Ω—è—Ç—å - –≤–∑—è—Ç—å –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç—É\n" +
		"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–∫–∞–∑–∞\n" +
		"‚Ä¢ üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é\n" +
		"‚Ä¢ üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n" +
		"‚Ä¢ üèÅ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n" +
		"–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleMyOrdersCommand(ctx context.Context, bot BotInterface, chatID int64) {
	h.log.Info("Fetching active orders for courier", "ChatID", chatID)

	orders, err := h.assignmentService.GetActiveOrdersByCourier(ctx, chatID)
	if err != nil {
		h.log.Error("Failed to get active orders for courier", "chatID", chatID, "Error", err)
		bot.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	if len(orders) == 0 {
		message := "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã*\n\n" +
			"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.\n\n" +
			"üí° *–°–æ–≤–µ—Ç:* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —Å—Ç–∞—Ç—É—Å '–ê–∫—Ç–∏–≤–µ–Ω' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n" +
			"–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
		bot.SendMessage(chatID, message)
		return
	}

	orderItems := h.convertOrdersToOrderListItem(ctx, orders)
	message := h.formatOrdersSummary(orderItems)
	keyboard := h.keyboardManager.CreateOrderListKeyboard(orderItems)

	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

func (h *Handlers) convertOrdersToOrderListItem(ctx context.Context, orders []models.Order) []OrderListItem {
	var items []OrderListItem

	for _, order := range orders {
		status := h.determineOrderStatus(ctx, order)
		item := OrderListItem{
			ID:      order.ID,
			Status:  status,
			Address: fmt.Sprintf("%s, %s", order.Address, order.City),
			Time:    h.formatDeliveryTime(order.DeliveryDate),
			Price:   order.FinalPrice,
		}

		items = append(items, item)
	}

	return items
}

func (h *Handlers) determineOrderStatus(ctx context.Context, order models.Order) string {
	assignment, err := h.assignmentService.GetByOrderID(ctx, order.ID)

	if err != nil || assignment == nil {
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
	}

	switch assignment.CourierResponseStatus {
	case "waiting":
		return "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞"
	case "accepted":
		if order.IsReceived {
			return "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω"
		} else if h.isDeliveryInProgerss(order) {
			return "üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ"
		} else {
			return "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
		}
	case "rejected":
		return "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω"
	case "expired":
		return "‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
	default:
		return "üìã –í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
	}
}

func (h *Handlers) isDeliveryInProgerss(order models.Order) bool {
	if order.DeliveryDate == nil {
		return false
	}

	now := time.Now()
	deliveryTime := *order.DeliveryDate

	timeUntilDelivery := deliveryTime.Sub(now)
	return timeUntilDelivery <= 2*time.Hour || deliveryTime.Before(now)
}

func (h *Handlers) formatDeliveryTime(deliveryTime *time.Time) string {
	if deliveryTime == nil {
		return "‚è∞ –í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
	}

	now := time.Now()
	delivery := *deliveryTime

	diff := delivery.Sub(now)

	if diff <= 0 {
		return "üö® –°–†–û–ß–ù–û! –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
	}

	if diff <= time.Hour {
		minutes := int(diff.Minutes())
		if minutes <= 0 {
			return "üö® –°–†–û–ß–ù–û! –ü—Ä–æ—Å—Ä–æ—á–µ–Ω"
		}
		return fmt.Sprintf("üö® —á–µ—Ä–µ–∑ %d –º–∏–Ω", minutes)
	}

	if delivery.Year() == now.Year() && delivery.Month() == now.Month() && delivery.Day() == now.Day() {
		return fmt.Sprintf("üïê –°–µ–≥–æ–¥–Ω—è –≤ %s", delivery.Format("15:04"))
	}

	tomorrow := now.Add(24 * time.Hour)
	if delivery.Year() == tomorrow.Year() && delivery.Month() == tomorrow.Month() && delivery.Day() == tomorrow.Day() {
		return fmt.Sprintf("üìÖ –ó–∞–≤—Ç—Ä–∞ –≤ %s", delivery.Format("15:04"))
	}

	weekLater := now.Add(7 * 24 * time.Hour)
	if delivery.Before(weekLater) {
		weekday := h.getRussianWeekday(delivery.Weekday())
		return fmt.Sprintf("üìÖ %s –≤ %s", weekday, delivery.Format("15:04"))
	}

	return fmt.Sprintf("üìÖ %s", delivery.Format("02.01 –≤ 15:04"))
}

func (h *Handlers) getRussianWeekday(weekday time.Weekday) string {
	days := map[time.Weekday]string{
		time.Monday:    "–ü–Ω",
		time.Tuesday:   "–í—Ç",
		time.Wednesday: "–°—Ä",
		time.Thursday:  "–ß—Ç",
		time.Friday:    "–ü—Ç",
		time.Saturday:  "–°–±",
		time.Sunday:    "–í—Å",
	}

	return days[weekday]
}

func (h *Handlers) formatOrdersSummary(orderItems []OrderListItem) string {
	var waitingCount, acceptCount, deliveryCount int

	for _, item := range orderItems {
		switch item.Status {
		case "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞", "‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è":
			waitingCount++
		case "‚úÖ –ü—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É":
			acceptCount++
		case "üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ":
			deliveryCount++
		}
	}

	total := len(orderItems)

	summary := fmt.Sprintf(
		"üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã*\n\n"+
			"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"+
			"‚Ä¢ ‚è≥ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: %d\n"+
			"‚Ä¢ ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É: %d\n"+
			"‚Ä¢ üöó –í –¥–æ—Å—Ç–∞–≤–∫–µ: %d\n"+
			"‚Ä¢ üìà –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: %d\n\n",
		waitingCount,
		acceptCount,
		deliveryCount,
		total,
	)

	summary += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"

	return summary
}

// –≠–¢–û –ó–ê–ì–õ–£–®–ö–ê, –ô–û–£
func (h *Handlers) HandleStatusCommand(bot BotInterface, chatID int64) {
	message := "‚ÑπÔ∏è *–í–∞—à —Å—Ç–∞—Ç—É—Å*\n\n" +
		"‚Ä¢ üì± –°—Ç–∞—Ç—É—Å: *–ê–∫—Ç–∏–≤–µ–Ω*\n" +
		"‚Ä¢ üöó –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤: *–î–∞*\n" +
		"‚Ä¢ üìä –ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: *0*\n" +
		"‚Ä¢ ‚≠ê –†–µ–π—Ç–∏–Ω–≥: *–ù–æ–≤—ã–π –∫—É—Ä—å–µ—Ä*\n\n" +
		"–í—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã! üöÄ"

	bot.SendMessage(chatID, message)
}

func (h *Handlers) HandleSettingsCommand(bot BotInterface, chatID int64) {
	message := "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*\n\n" +
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

	keyboard := h.keyboardManager.CreateSettingsKeyboard()
	bot.SendMessageWithInlineKeyboard(chatID, message, keyboard)
}

func (h *Handlers) HandleUnknownCommand(bot BotInterface, chatID int64) {
	message := "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."

	bot.SendMessage(chatID, message)
}
