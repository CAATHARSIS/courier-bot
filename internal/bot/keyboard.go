package bot

import (
	"fmt"
	"log/slog"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type KeyboardManager struct {
	log *slog.Logger
}

func NewkeyboardManager(log *slog.Logger) *KeyboardManager {
	return &KeyboardManager{
		log: log,
	}
}

func (km *KeyboardManager) CreateAssignmentKeyboard(orderID int) tgbotapi.InlineKeyboardMarkup {
	km.log.Debug("Creating assignment keyboard for order", "orderID", orderID)

	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("%s_%d", ActionAccept, orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fmt.Sprintf("%s_%d", ActionReject, orderID)),
		),
	)
}

func (km *KeyboardManager) CreateDeliveryKeyboard(orderID int, address, phone string) tgbotapi.InlineKeyboardMarkup {
	km.log.Debug("Creating delivery keyboard for order", "orderID", orderID)

	rows := [][]tgbotapi.InlineKeyboardButton{}

	if address != "" {
		navigationRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", fmt.Sprintf("nav_%d_%s", orderID, km.escapeCallbackData(address))),
		)
		rows = append(rows, navigationRow)
	}

	if phone != "" {
		callRow := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", fmt.Sprintf("call_%d_%s", orderID, phone)),
		)
		rows = append(rows, callRow)
	}

	completionRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üèÅ –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", fmt.Sprintf("%s_%d", ActionComplete, orderID)),
		tgbotapi.NewInlineKeyboardButtonData("üö® –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", fmt.Sprintf("%s_%d", ActionProblem, orderID)),
	)
	rows = append(rows, completionRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (km *KeyboardManager) CreateStatusKeyboard(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöó –ó–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑", fmt.Sprintf("status_picked_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("üöö –í –ø—É—Ç–∏", fmt.Sprintf("status_delivery_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìç –ù–∞ –º–µ—Å—Ç–µ", fmt.Sprintf("status_arrived_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", fmt.Sprintf("status_delivered_%d", orderID)),
		),
	)
}

func (km *KeyboardManager) CreateMainMenuKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
			tgbotapi.NewKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
			tgbotapi.NewKeyboardButton("üÜò –ü–æ–º–æ—â—å"),
		),
	)
}

func (km *KeyboardManager) CreateSettingsKeyboard() tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "settings_notifications"),
			tgbotapi.NewInlineKeyboardButtonData("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", "settings_workmode"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ö–æ–Ω—Ç–∞–∫—Ç—ã", "seetings_contacts"),
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "menu_main"),
		),
	)
}

func (km *KeyboardManager) CreateConfirmationKeyboard(action string, data interface{}) tgbotapi.InlineKeyboardMarkup {
	callbackData := fmt.Sprintf("%s_confirm_%v", action, data)

	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callbackData),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_action"),
		),
	)
}

func (km *KeyboardManager) CreateOrderListKeyboard(orders []OrderListItem) tgbotapi.InlineKeyboardMarkup {
	var rows [][]tgbotapi.InlineKeyboardButton

	for _, order := range orders {
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("üì¶ –ó–∞–∫–∞–∑ #%d - %s", order.ID, order.Status),
				fmt.Sprintf("order_details_%d", order.ID),
			),
		)
		rows = append(rows, row)
	}

	refreshRow := tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_orders"),
		tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", "menu_main"),
	)
	rows = append(rows, refreshRow)

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (km *KeyboardManager) CreateProblemKeyboard(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìû –ö–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç", fmt.Sprintf("problem_noanswer_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å", fmt.Sprintf("problem_wrongaddress_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí≥ –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø–ª–∞—Ç–æ–π", fmt.Sprintf("problem_payment_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üöó –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã", fmt.Sprintf("problem_technical_%d", orderID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùî –î—Ä—É–≥–æ–µ", fmt.Sprintf("problem_other_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚Ü©Ô∏è –ù–∞–∑–∞–¥", fmt.Sprintf("back_to_order_%d", orderID)),
		),
	)
}

func (km *KeyboardManager) CreateYesNoKeyboard(action string, id int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞", fmt.Sprintf("%s_yes_%d", action, id)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç", fmt.Sprintf("%s_no_%d", action, id)),
		),
	)
}

func (km *KeyboardManager) RemoveKeyboard() tgbotapi.ReplyKeyboardRemove {
	return tgbotapi.NewRemoveKeyboard(true)
}

func (km *KeyboardManager) ParseCallbackData(callbackData string) (action string, id int, err error) {
	parts := strings.Split(callbackData, "_")
	if len(parts) < 2 {
		return "", 0, fmt.Errorf("invalid callback data format: %s", callbackData)
	}

	action = parts[0]

	if len(parts) > 1 {
		var extractedID int
		_, err := fmt.Sscanf(parts[len(parts)-1], "%d", &extractedID)
		if err == nil {
			id = extractedID
		}
	}

	return action, id, nil
}

// escapeCallbackData —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è callback_data
// –í Telegram callback_data –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 64 –±–∞–π—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã
func (km *KeyboardManager) escapeCallbackData(data string) string {
	if len(data) > 50 {
		data = data[:50]
	}

	replacements := map[string]string{
		" ":  "_",
		"\n": "",
		"\t": "",
		",":  "",
		".":  "",
		":":  "",
		";":  "",
	}

	for old, new := range replacements {
		data = strings.ReplaceAll(data, old, new)
	}

	return data
}

func (km *KeyboardManager) GetActionFromCallback(callback string) string {
	prefixes := []string{
		ActionAccept,
		ActionReject,
		ActionComplete,
		ActionProblem,
		"nav",
		"call",
		"status",
		"settings",
		"confirm",
		"cancel",
		"refresh",
		"menu",
		"order_details",
		"back_to_order",
	}

	for _, prefix := range prefixes {
		if strings.HasPrefix(callback, prefix) {
			return prefix
		}
	}
	return "unknown"
}
