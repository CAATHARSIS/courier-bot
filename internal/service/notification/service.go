package notification

import (
	"fmt"
	"log/slog"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type NotificationType string

const (
	TypeNewAssignment NotificationType = "new_assignment"
	TypeAccepted      NotificationType = "accepted"
	TypeRejected      NotificationType = "rejected"
	TypeReminder      NotificationType = "reminder"
	TypeSystem        NotificationType = "system"
	TypeDeliveryInfo  NotificationType = "delivery_info"
)

type Notification struct {
	Type          NotificationType
	CourierChatID int64
	OrderID       int
	Message       string
	Data          map[string]interface{}
}

type NotificationService struct {
	botAPI *tgbotapi.BotAPI
	log    *slog.Logger
}

func NewService(botAPI *tgbotapi.BotAPI, log *slog.Logger) *NotificationService {
	return &NotificationService{
		botAPI: botAPI,
		log:    log,
	}
}

func (s *NotificationService) SendNotification(notification *Notification) error {
	switch notification.Type {
	case TypeNewAssignment:
		return s.SendAssignmentNotification(notification.CourierChatID, notification.OrderID, notification.Message)
	case TypeAccepted:
		return s.SendAcceptanceConfirmation(notification.CourierChatID, notification.OrderID)
	case TypeRejected:
		return s.SendRejectionConfirmation(notification.CourierChatID, notification.OrderID)
	case TypeReminder:
		return s.SendReminder(notification.CourierChatID, notification.OrderID, notification.Data)
	case TypeDeliveryInfo:
		return s.SendDeliveryInformation(notification.CourierChatID, notification.OrderID, notification.Data)
	default:
		return fmt.Errorf("unknown notification type: %s", notification.Type)
	}
}

func (s *NotificationService) SendAssignmentNotification(chatID int64, orderID int, orderInfo string) error {
	message := fmt.Sprintf(
		"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏*\n\n%s\n\n‚è∞ *–£ –≤–∞—Å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ*",
		orderInfo,
	)

	keyboard := s.createAssignmentKeyboard(orderID)

	return s.sendMessageWithKeyboard(chatID, message, keyboard)
}

func (s *NotificationService) SendAcceptanceConfirmation(chatID int64, orderID int) error {
	message := fmt.Sprintf(
		"‚úÖ *–ó–∞–∫–∞–∑ %d –ø—Ä–∏–Ω—è—Ç!*\n\n"+
			"–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –∑–∞ –≤–∞–º–∏.\n\n"+
			"üìã –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
		orderID,
	)

	return s.sendSimpleMessage(chatID, message)
}

func (s *NotificationService) SendRejectionConfirmation(chatID int64, orderID int) error {
	message := fmt.Sprintf(
		"‚ùå *–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞ #%d*\n\n"+
			"–ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω –¥—Ä—É–≥–æ–º—É –∫—É—Ä—å–µ—Ä—É\n\n"+
			"üîÑ –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!",
		orderID,
	)

	return s.sendSimpleMessage(chatID, message)
}

func (s *NotificationService) SendReminder(chatID int64, orderID int, data map[string]interface{}) error {
	minutesLeft := 5
	if min, ok := data["minutes_left"].(int); ok {
		minutesLeft = min
	}

	message := fmt.Sprintf(
		"‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n"+
			"–ü–æ –∑–∞–∫–∞–∑—É #%d –æ—Å—Ç–∞–ª–æ—Å—å *%d –º–∏–Ω—É—Ç* –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è.\n\n"+
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
		orderID,
		minutesLeft,
	)

	keyboard := s.createAssignmentKeyboard(orderID)
	return s.sendMessageWithKeyboard(chatID, message, keyboard)
}

func (s *NotificationService) SendSystemNotification(chatID int64, message string) error {
	fullMessage := fmt.Sprintf("üîî *–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n%s", message)
	return s.sendSimpleMessage(chatID, fullMessage)
}

func (s *NotificationService) SendDeliveryInformation(chatID int64, orderID int, data map[string]interface{}) error {
	address, _ := data["address"].(string)
	customerName, _ := data["customer_name"].(string)
	customerPhone, _ := data["customer_phone"].(string)
	deliveryTime, _ := data["delivery_time"].(string)
	orderPrice, _ := data["order_price"].(int)
	deliveryPrice, _ := data["delivery_price"].(int)

	message := fmt.Sprintf(
		"üöö *–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ #%d*\n\n"+
			"*–ê–¥—Ä–µ—Å:* %s\n"+
			"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
			"*–¢–µ–ª–µ—Ñ–æ–Ω:* %s\n"+
			"*–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* %s\n"+
			"*–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:* %d\n"+
			"*–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* %d\n"+
			"üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞\n"+
			"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏",
		orderID,
		address,
		customerName,
		customerPhone,
		deliveryTime,
		orderPrice,
		deliveryPrice,
	)

	keyboard := s.createDeliveryKeyboard(address, customerPhone)
	return s.sendMessageWithKeyboard(chatID, message, keyboard)

}

func (s *NotificationService) sendMessageWithKeyboard(chatID int64, text string, keyboard tgbotapi.InlineKeyboardMarkup) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard

	_, err := s.botAPI.Send(msg)
	if err != nil {
		s.log.Error("Failed to send message with keyboard to chat", "chatID", chatID, "error", err)
		return err
	}

	s.log.Info("Message with keyboard sent to chat", "chatID", chatID)
	return nil
}

func (s *NotificationService) sendSimpleMessage(chatID int64, text string) error {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	_, err := s.botAPI.Send(msg)
	if err != nil {
		s.log.Error("Failed to send message to chat", "chatID", chatID, "error", err)
		return err
	}
	s.log.Info("Message sent to chat", "chatID", chatID)
	return nil
}

func (s *NotificationService) createAssignmentKeyboard(orderID int) tgbotapi.InlineKeyboardMarkup {
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", fmt.Sprintf("accept_%d", orderID)),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", fmt.Sprintf("reject_%d", orderID)),
		),
	)
}

func (s *NotificationService) createDeliveryKeyboard(address, phone string) tgbotapi.InlineKeyboardMarkup {
	rows := [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("üó∫Ô∏è –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö", fmt.Sprintf("nav_%s", address)),
		},
	}

	if phone != "" {
		rows = append(rows, []tgbotapi.InlineKeyboardButton{
			tgbotapi.NewInlineKeyboardButtonData("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", fmt.Sprintf("call_%s", phone)),
		})
	}

	return tgbotapi.NewInlineKeyboardMarkup(rows...)
}

func (s *NotificationService) SendMessage(chatID int64, message string) error {
	return s.sendSimpleMessage(chatID, message)
}

func (s *NotificationService) SendMessageWithKeyboard(chatID int64, message string, orderID int) error {
	keyboard := s.createAssignmentKeyboard(orderID)
	return s.sendMessageWithKeyboard(chatID, message, keyboard)
}

func (s *NotificationService) TestConnection() error {
	_, err := s.botAPI.GetMe()
	if err != nil {
		return fmt.Errorf("failed to connect to Telegram API: %v", err)
	}

	s.log.Info("Telegram bot connection test successfull")
	return nil
}

func (s *NotificationService) GetDeliveryInfoMessage(orderID int, address, customerName, customerPhone, deliveryTime string, orderPrice, deliveryPrice int) string {
	return fmt.Sprintf(
		"üöö *–î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ #%d*\n\n"+
			"*–ê–¥—Ä–µ—Å:* %s\n"+
			"*–ö–ª–∏–µ–Ω—Ç:* %s\n"+
			"*–¢–µ–ª–µ—Ñ–æ–Ω:* %s\n"+
			"*–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* %s\n"+
			"*–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:* %d\n"+
			"*–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏:* %d\n"+
			"üìç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞\n"+
			"üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞ 15 –º–∏–Ω—É—Ç –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏",
		orderID,
		address,
		customerName,
		customerPhone,
		deliveryTime,
		orderPrice,
		deliveryPrice,
	)
}

func (s *NotificationService) GetAssignemntMessage(orderInfo string) string {
	return fmt.Sprintf(
		"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏!*\n\n%s\n\n‚è∞ *–£ –≤–∞—Å 10 –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ*",
		orderInfo,
	)
}
